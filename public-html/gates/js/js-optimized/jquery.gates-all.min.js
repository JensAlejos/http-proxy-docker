/**
 * 
 */


/**
 * $('#myTextField').gatesAutocomplete({
 *   source: 'url',
 *   formatItem: function(item) {
 *     return item.id + ': ' + item.description;
 *   },
 *   formatResult: function(item) {
 *     return item.description;
 *   },
 *   select: function(item) {
 *     $('#myHiddenField).val(item.id);
 *   }
 * });
 */

if (typeof String.prototype.trim !== 'function') {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, ''); 
  };
}

var thisId=""; // to be used when predictive is triggered from grid e.g. $('#'+thisId).val("value to be displayed");

(function( $ ){
	var requestIndex = 0;
	
	var methods = {
		init: function() {
		
		}
	};


	$.fn.gatesAutocomplete = function(optionsParameter) {
		var defaults = {
			source: null,
			extraParams: null,
			timeout: 10000,
			name:null,		//name of the associated field to be displayed in error msg
			minLength: 2,
			mustMatch: false, //to clear the input field when no items in resultset
			formatItem: formatItem, // to format the items in resultset
			formatResult: formatResult,
			select: null,
			beforeTrigger:beforeTrigger,
			noMatchHandler:noMatchHandler, //Action to be taken if no match is found(e.g. alert/show prompt)
			showTimeOutErrorMessage:true,	// to configure time out error messages
			autoSelectFirst:false,		   // to select first element in the result set on tab out	
			autoSelectWhenSingle:false,	  // to auto select on tab out when resultset contains single item		
			onChange:onChange,           //to override change event of respective text boxes.
			autoSelectCriteria:autoSelectCriteria,
			autoSelectTextAfter:false,
			onBlur:onBlur,
			defaultValue:'',
			errorMessage:''
		};

		var options = $.extend({}, defaults, {}, optionsParameter);
		
		function formatResult(item) {
			return item.name;
		}

		function formatItem(item) {
			return item.name + " (id: " + item.id + ")";
		}

		function beforeTrigger() {
			return "";
		}
		
		function noMatchHandler() {
			return '';
		}
		
		function onChange() {
			return '';
		}
		
		function autoSelectCriteria(item) {
			return 'false';
		}
		
		function onBlur() {
			return '';
		}
		
		return this.each(function() {
			var dataToSelect="";
			var totalItemsFound=0;
			var isAutoSelected=false;
			var isTriggeredManually=false;
			var isInputChanged=false;
			var isBlank=false;
			var isAutocompleteTriggered=false;
			var valueInTextBox="";
			var isAutoSelectFunctionTriggered=false;
			var isSelectedFromMouse=false;
			var isMouseUp=true;
			var isResponseReceived=true;
			
			
			
			if($(this).val().trim()=='' && options.defaultValue.trim()!='') {
				$(this).val(options.defaultValue);
			}
			$(this).keypress(function(event) {
				isInputChanged=true;
				isAutocompleteTriggered=false;
				thisId=$(this).attr('id');
				thisId=thisId.replace(".", "\\.");
				if(event.which!=13) {
					dataToSelect="";
					totalItemsFound=0;
					isAutoSelected=false;
					setTimeout(function(){
						valueInTextBox=$('#'+thisId).val();
					},2);
				}
			});
			
			$(this).bind('paste',function(event) {
				thisId=$(this).attr('id');
				thisId=thisId.replace(".", "\\.");
				setTimeout(function(){
					isInputChanged=true;
					isAutocompleteTriggered=false;
					dataToSelect="";
					totalItemsFound=0;
					isAutoSelected=false;
					setTimeout(function(){
						valueInTextBox=$('#'+thisId).val();
					},2);
				},1);
				
			});
			
			$(this).keydown(function(event) {
				if(event.which==46 || event.which==8) {
					isInputChanged=true;
					isAutocompleteTriggered=false;
					dataToSelect="";
					totalItemsFound=0;
					isAutoSelected=false;
				}
				thisId=$(this).attr('id');
				thisId=thisId.replace(".", "\\.");
				if(event.which!=13) {
					setTimeout(function(){
						valueInTextBox=$('#'+thisId).val();
					},2);
				}
			});
			
			if(options.autoSelectFirst || options.autoSelectWhenSingle) {
				$(this).blur(function(event){
					var val=$(this).val();
					if(val.trim()=="") {
						isBlank=true;
					}
					else {
						isBlank=false;
					}
					if(!isAutocompleteTriggered && !isAutoSelected && !isBlank && isInputChanged && valueInTextBox==$('#'+thisId).val()) {
						isTriggeredManually=true;
						$(this).autocomplete('search', $(this).val());
					}
					else if(isInputChanged && document.hasFocus()){
						setTimeout(function(){
							
							if(!isAutoSelectFunctionTriggered && !isSelectedFromMouse) {
								setTimeout(function(){
									if(!isAutoSelectFunctionTriggered) {
										callAutoSelect();
									}
								},100);
							}
							else if(isMouseUp){ //Mouse in released state i.e. Mouse would be in up state all the time except when mouse is clicked and not yet released 
								setTimeout(function(){
									options.onChange();
									options.onBlur();
								},100);
							}
							
						},100);
					}
					else {
						setTimeout(function(){
							options.onBlur();
						},100);
					}
				});
				$('.ui-autocomplete').live('mousedown',function(){
					isSelectedFromMouse=true;
					isMouseUp=false;
				});
				$('.ui-autocomplete').live('mouseup',function(){
					isSelectedFromMouse=true;
					isMouseUp=true;
				});
			}
			else {
				$(this).blur(function(){
					setTimeout(function(){
						options.onBlur();
					},100);
				});
				
				$(this).change(function(){
					setTimeout(function(){
						options.onChange();
					},100);
				});
			}
			
			$(this).autocomplete({
				//source: options.source, //TODO: handle extraParams and set in URL
				source: function( request, response ) {
					options.beforeTrigger(),
					isAutoSelectFunctionTriggered=false;
					dataToSelect="";
					totalItemsFound=0;
					isAutocompleteTriggered=true;
					isSelectedFromMouse=false;
					isResponseReceived=false;
					var id=this.element.attr('id');
					if ( self.xhr ) {
						self.xhr.abort();
					}
					self.xhr = $.ajax({
						url: options.source,
						timeout: options.timeout,
						data: $.extend({}, request, {}, options.extraParams),
						dataType: "json",
						autocompleteRequest: ++requestIndex,
						success: function( data, status ) {
							//console.log('response received');
							isResponseReceived=true;
							if ( this.autocompleteRequest === requestIndex ) {
								if(data.length==0 && options.noMatchHandler()!='') {
									options.noMatchHandler();
								}
								if(data.length>0 && (options.autoSelectFirst || options.autoSelectWhenSingle)) {
									if(options.autoSelectCriteria(data[0])==true || options.autoSelectCriteria(data[0])==false || options.autoSelectCriteria(data[0])==undefined) {
										for(var index=0;index<data.length;index++) {
											if(options.autoSelectCriteria(data[index])) {
												dataToSelect=data[index];
												break;
											}
										}
									}
									else {
										dataToSelect=data[0];
									}
								}
								else {
									dataToSelect="";
								}
								totalItemsFound=data.length;
								
								response( data );
								if(isTriggeredManually) {
									//setTimeout(function(){
										if(!isAutoSelectFunctionTriggered) {
											autoSelectFunction();
											options.onChange();
											options.onBlur();
										}
									//},50);
									
								}
							}
						},
						error: function(jqXHR, textStatus, errorThrown) {
							isResponseReceived=true;
							if ( this.autocompleteRequest === requestIndex ) {
								var messageText="";
								if(options.name!=null) {
									messageText="Retry! "+ options.name+ " Timeout";
								}
								else{
										messageText="Retry! "+id;
								}
								
								if(textStatus=="error"){
									if(options.showTimeOutErrorMessage) {
										messageText=messageText+" Could not retrieve records.";
										if(options.errorMessage!='') {
											messageText=options.errorMessage;
										}
										$.achtung({
							                className: 'achtungFail',
							                timeout: 3000,
							                message: messageText
							            });
									}
								}
								else if(textStatus == "timeout") {
									if(options.showTimeOutErrorMessage) {
										messageText=messageText+" Timeout";
										$.achtung({
							                className: 'achtungFail',
							                timeout: 3000,
							                message: messageText
							            });
									}
								}
								 
	
								
								dataToSelect="";
								totalItemsFound=0;
								response( [] );
							}
						}
					});
				},
				minLength: options.minLength,
				focus: function( event, ui ) {
				    //D024822: Change of focus selects first entry in org pick list
					$(this).val( options.formatResult(ui.item) );
					return false;
				},
				change: function(event, ui) {
					
					if (options.mustMatch && !ui.item) {
						var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex($(this).val()) + "$", "i");
						var valid = false;
						var $autocomplete = $(this);
						
						// -----------------------------------
						
						var matchHandler = function() {
							var autocomplete = $( this ).data( "autocomplete" );
							
							//- $(autocomplete.menu.element)[0].innerText
							if (autocomplete.xhr) {
							var items = $.parseJSON(autocomplete.xhr.responseText);
							if(items.length==1)
							{
								options.select(items[0]);
							}
							else
								{
									for (var i=0; i<items.length; i++) {
										var text = formatResult(items[i]);
										if (text.match(matcher)) {
											valid = true;
											//- $autocomplete.val(text);
											options.select(items[i]);
											
											break;
										}
									}
								}
							}
							
							$( ".ui-autocomplete-input" ).die( "autocompleteopen", arguments.callee);
							$autocomplete.autocomplete('close');
						}
						
						 $( ".ui-autocomplete-input" ).live( "autocompleteopen", matchHandler);

							$(this).autocomplete('search', $(this).val());
						// -----------------------------------

						 
						if (!valid) {
							$(this).val('');
							return false;
						}
					}
					else if (!ui.item && document.hasFocus()) {
						if(!isAutoSelectFunctionTriggered) {
							callAutoSelect();
						}
					}

				},
				select: function( event, ui ) {
					console.log('triggering select');
					isAutoSelected=true;
					dataToSelect="";
					isAutoSelectFunctionTriggered=true;
					totalItemsFound=0;
					options.select(ui.item);
					$(this).val(options.formatResult(ui.item) );
					if (options.autoSelectTextAfter === true) $(this).select();
					return false;
				}
			})
			.data( "autocomplete" )._renderItem = function( ul, item ) {
				if(options.extraParams != null)
					var renderedOption = options.formatResult(item);
				else
					var renderedOption = options.formatItem(item);

				renderedOption = renderedOption.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + 
					$.ui.autocomplete.escapeRegex(this.term) + 
					")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");

				var even = (ul.children().size()%2) == 0;
				var listItem= $( "<li></li>" )
					.data( "item.autocomplete", item )
					.append( "<a class=\"" + (even?'ac_even':'ac_odd') + "\">" + renderedOption + "</a>" )
					.appendTo( ul );
				
				return listItem;
			};
			
			function callAutoSelect() {
				//console.log('triggered callAutoSelect()');
				if(isResponseReceived && !isAutoSelectFunctionTriggered) {
					//console.log('triggering autoselect');
					autoSelectFunction();
					options.onChange();
					options.onBlur();
				}
				else {
					//console.log('before timeout');
					setTimeout(function(){
						//console.log('after timeout');
						if(!isAutoSelectFunctionTriggered) {
							callAutoSelect();
						}
					},100);
				}
			}
			
			function autoSelectFunction() {
				//console.log('triggered autoselect');
				isAutoSelectFunctionTriggered=true;
				if(valueInTextBox==$('#'+thisId).val()) {
					if(options.autoSelectFirst) {
						if(options.mustMatch) {
							if(dataToSelect!="" && dataToSelect!=null && dataToSelect!=undefined) {
								var formattedResult=options.formatResult(dataToSelect);
								$('#'+thisId).val(formattedResult);
								options.select(dataToSelect);
								$('#'+thisId).val(formattedResult);
								isAutoSelected=true;
							}
							else {
								$('#'+thisId).val(options.defaultValue);
								dataToSelect="";
								totalItemsFound=0;
								isAutoSelected=false;
							}
						}
						else {
							if(dataToSelect!="" && dataToSelect!=null && dataToSelect!=undefined) {
								var formattedResult=options.formatResult(dataToSelect);
								$('#'+thisId).val(formattedResult);
								options.select(dataToSelect);
								$('#'+thisId).val(formattedResult);
								dataToSelect="";
								totalItemsFound=0;
								isAutoSelected=true;
							}
						}
						$('.ui-autocomplete').hide();
					}
					else if(options.autoSelectWhenSingle && totalItemsFound==1) {
							if(options.mustMatch) {
								if(dataToSelect!="" && dataToSelect!=null && dataToSelect!=undefined) {
									var formattedResult=options.formatResult(dataToSelect);
									$('#'+thisId).val(formattedResult);
									options.select(dataToSelect);
									$('#'+thisId).val(formattedResult);
									dataToSelect="";
									totalItemsFound=0;
									isAutoSelected=true;
								}
								else {
									$('#'+thisId).val(options.defaultValue);
									dataToSelect="";
									totalItemsFound=0;
									isAutoSelected=false;
								}
							}
							else {
								if(dataToSelect!="" && dataToSelect!=null && dataToSelect!=undefined) {
									var formattedResult=options.formatResult(dataToSelect);
									$('#'+thisId).val(formattedResult);
									options.select(dataToSelect);
									$('#'+thisId).val(formattedResult);
									dataToSelect="";
									totalItemsFound=0;
									isAutoSelected=true;
								}
							}
							$('.ui-autocomplete').hide();
						}
					else {
						if(options.mustMatch) {
							$('#'+thisId).val(options.defaultValue);
							dataToSelect="";
							totalItemsFound=0;
							isAutoSelected=false;
						}
						$('.ui-autocomplete').hide();
					}
				}
				else {
					dataToSelect="";
					totalItemsFound=0;
					isAutoSelected=false;
				}
				isTriggeredManually=false;
				isInputChanged=false;
				isAutocompleteTriggered=false;
			}
			
		});
		
		

	};
})( jQuery );





function autoComplete(id,method,search,contextPath){

	var url = contextPath+'/cas/autocomplete.do?method='+method+'&searchType='+search;
	$( "#"+id ).autocomplete({
		source: url,
		minLength: 2,
		//mustMatch: true,
		focus: function( event, ui ) {
			$( "#"+id ).val( ui.item.name );
			return false;
		},
		select: function( event, ui ) {
			$( "#"+id ).val( ui.item.name);
			return false;
		}	
	})
	.data( "autocomplete" )._renderItem = function( ul, item ) {
		var renderedOption = item.name + " (id: " + item.id + ")";
		
		renderedOption = renderedOption.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + 
		$.ui.autocomplete.escapeRegex(this.term) + 
		")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
		
		var even = (ul.children().size()%2) == 0;
		var listItem= $( "<li></li>" )
		.data( "item.autocomplete", item )
		.append( "<a class=\"" + (even?'ac_even':'ac_odd') + "\">" + renderedOption + "</a>" )
		.appendTo( ul );
		
		return listItem;
	};

}

function prediAddressSearch(id,method,search,contextPath){

	var url = contextPath+'/cas/predAddressSearch.do?method='+method+'&searchType='+search;
	
	$( "#"+id ).autocomplete({
		source: url,
		minLength: 2,
		focus: function( event, ui ) {
		$( "#"+id ).val( ui.item.name );
		return false;
		},
		select: function( event, ui ) {
			$( "#"+id ).val( ui.item.name );
			return false;
			}
	})
	.data( "autocomplete" )._renderItem = function( ul, item ) {
		var renderedOption = item.name + " (id: " + item.id + ")";
		
		renderedOption = renderedOption.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + 
		$.ui.autocomplete.escapeRegex(this.term) + 
		")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
		
		var even = (ul.children().size()%2) == 0;
		var listItem= $( "<li></li>" )
		.data( "item.autocomplete", item )
		.append( "<a class=\"" + (even?'ac_even':'ac_odd') + "\">" + renderedOption + "</a>" )
		.appendTo( ul );
		
		return listItem;
	};

}
;$(document).ready(function() {
	
	// attach validation engine with form
	$("#contactA").validationEngine('attach');
	
	// style buttons
	$('input[type="button"]').removeClass("formButton").addClass("buttonNoFloat");
	/*var $resetButton = $('td input[type="button"][value="Reset"]');
	$resetButton.removeClass("formButton").addClass("buttonNoFloat");
	var $cancelButton = $('td input[type="button"][value="Cancel"]');
	$cancelButton.removeClass("formButton").addClass("buttonNoFloat");
	var $searchButton = $('td input[type="button"][value="Search"]');
	$searchButton.removeClass("formButton").addClass("buttonNoFloat");*/
	
	
	
});  // ready method end

//hide all inline validation error messages
function removeErrorPointers(){
	   $('#contactA').validationEngine('hideAll');
}



(function($) {

		$.fn.gatesPopUpSearch = function(o) {

			var o = $.extend({}, $.fn.gatesPopUpSearch.defaults, {}, o);
			
			return this.each(function() {		
				var f = this;
				var id = 'popupSearch'+f.id;
				var $button = $('<img src="'+o.imagePath+'/'+o.imgOut+'"  border="0" style="vertical-align:text-bottom;">');
				if (f.button && f.button == true) return false;
				$button.attr({id:id,name:id,alt:o.alt}).css('cursor',o.cursor);
				$button.click(function(){ 
					if (f.disabled == true){
						return false;
					}
					o.func();
				});
				$button.mouseover(function(){ 
					if (f.disabled == true){
						return false;
					}
					this.src = this.src.replace(o.imgOut,o.imgOver); 
				});
				$button.mouseout(function(){ 
					this.src = this.src.replace(o.imgOver,o.imgOut); 
				});
				$(f).after($button);
				f.button = true;
			});
		};
		$.fn.gatesPopUpSearch.defaults = {
				imagePath: '/gates/resources/images',
				imgOver: 'search.png', 
				imgOut: 'search.png',
				cursor: 'pointer',
				alt: 'Search',
				func: function() {}
			};
		})(jQuery);/**
 *    
 * 
 * jquery plugin for comments functionality.
 * It handle comment for all the screens
 *   
 * 
 */

(function( $ ){
	var methods = {
		init: function() {
		
		}
	};


	$.fn.comments = function(optionsParameter) {
		var defaults = {
			entityType: null,
			entityId: null,
			commentId: null,
			commentType: 'MEMO',
			displayCommentTypes: 'MEMO',
			displayCount: true,
			viewOnly: false,
			url: _context+'/comments',
			commentsFrame: 'commentsFrame',
			param1:'',
			commentTypesForGrid: '_blank',
			isDeleteAllowed: false,
			isEditAllowed: false
		};
		
		// Replacing options parameters to default values
		var options = $.extend({}, defaults, {}, optionsParameter);
		
		// To set comment count while loading of the screen
		return this.each(function() {
			var component=$(this);
			if ($("#"+options.commentId).val() && options.displayCount) {
				var commentsElement = this;
				//- $.ajax to get count

				$.getJSON(options.url + '/count/'+options.entityType+'/' + $("#"+options.commentId).val()+"/"+options.commentTypesForGrid+"/"+ options.displayCommentTypes, function(data) {
					
					//- set count field while loading of the screen
					if(data==-1) {
						$(component).hide();
					}
					//D020000, For Comments in dispatch
					else if(options.commentId != "bookingCommentId"){
						$('#count', component).html("("+data+")");
					}
					
				});
			}
			
			$(this).click(function() {
				$('form').validationEngine('hideAll');
				//- launch comments dialog
				//creating URL to open comment dialog
				var isDelete = "N";
				if(options.isDeleteAllowed)
					isDelete = "Y";
				var isEdit = "N";
				if(options.isEditAllowed)
					isEdit = "Y";
				var link = options.url + "/?entityType="+options.entityType		
							+ "&commentId=" + $("#"+options.commentId).val()
							+ "&entityId=" +options.entityId
							+ "&displayCommentTypes=" +options.displayCommentTypes
							+ "&viewOnly=" +options.viewOnly
							+ "&displayCount=" +options.displayCount
							+ "&commentsFrame=" + options.commentsFrame
							+ "&commentIdSelector=" + options.commentId
							+ "&param1=" + options.param1
							+ "&commentSelector=" + $(this).attr('id')
							+ "&commentTypesForGrid=" + options.commentTypesForGrid
							+ "&isDeleteAllowed=" + isDelete
							+ "&isEditAllowed=" + isEdit;
				var xErrorCoordinate = window.pageXOffset;
				var yErrorCoordinate = window.pageYOffset;
				$("#"+options.commentsFrame)
				.attr('src', link)
				.dialog({
					width : 883,
					height : 735,
					title : 'Comments',
					autoResize : true,
					modal: true,
					close:function( event, ui ) {
						if ($("#"+options.commentId).val() && options.displayCount) {
							var commentsElement = this;
							//- $.ajax to get count

							$.getJSON(options.url + '/count/'+options.entityType+'/' + $("#"+options.commentId).val()+"/"+options.commentTypesForGrid+"/"+ options.displayCommentTypes, function(data) {
									
								//- set count field while loading of the screen
								if(data==-1) {
									$(component).hide();
								}
								//D020000, For Comments in dispatch
								else if(options.commentId != "bookingCommentId"){
									$('#count', component).html("("+data+")");
								}
								
							});
						}
					}
				})
				.width(873);
				setTimeout(function(){
				window.scrollTo(xErrorCoordinate, yErrorCoordinate);
				}, 250);
				//- attach handlers to update count and commentId
				//- @see comments.jsp
			});

		});
	};
})( jQuery );


/**
 *    
 * 
 * jquery plugin for history functionality.
 * It handle history for all the screens
 *   
 * 
 */

(function( $ ){
	var methods = {
		init: function() {
		
		}
	};


	$.fn.history = function(optionsParameter) {
		var defaults = {
			entityId: null,
			entity: null,
			property: "",
			displayMode: "normal",
			url: _context+'/history',
			historyFrame: 'historyFrame'
		};
		
		// Replacing options parameters to default values
		var options = $.extend({}, defaults, {}, optionsParameter);
		

		return this.each(function() {
			
			$(this).click(function() {
				//- launch history dialog
				//creating URL to open history dialog
				var link = options.url + "/revisions/?entityId="+options.entityId		
							+ "&entity=" +options.entity
							+ "&propertyName=" +options.property
							+ "&historyFrame=" + options.historyFrame
							+ "&displayMode=" + options.displayMode;
				
				$("#"+options.historyFrame)
				.attr('src', link)
				.dialog({
					width : 840,
					height : 550,
					title : 'History',
					autoResize : true,
					modal: true
				})
				.width(840 - 10)
				.height(550 - 10);

			});

		});

	};
})( jQuery );


/**
 * 
 */


(function( $ ){
	var methods = {
		init: function() {
		
		}/*,
	
		isInsideGrid: function(element) {
			return $(element).parents('[id^="gbox"]').size() > 0;
		}*/
	};


	$.fn.gatesDisable = function(optionsParameter) {
		var defaults = {
			exclude: []
		};

		var options = $.extend({}, defaults, {}, optionsParameter);
		
		return this.each(function() {
			//- Disable form elements
			$('input[type != "hidden"]', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0 && $(this).parents('[id^="gbox"]').size() == 0) {
					$(this).attr({disabled: true});
				}
			});

			$('textarea', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0 && $(this).parents('[id^="gbox"]').size() == 0) {
					$(this).attr({disabled: true});
				}
			});

			$('select', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0 && $(this).parents('[id^="gbox"]').size() == 0) {
					$(this).attr({disabled: true});
				}
			});

			$('button', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0 && $(this).parents('[id^="gbox"]').size() == 0) {
					$(this).attr({disabled: true});
				}
			});

			$('a', $(this)).each(function() {
				var classValue=$(this).attr('class');
				if ($.inArray($(this).attr('id'), options.exclude) < 0 && classValue!='comments') {
					$(this).contents().unwrap();
				}
			});

			// TODO: Disable jqGrid
		});

	};
	

	//method does not handle hyperlinks
	$.fn.gatesEnable = function(optionsParameter) {
		var defaults = {
			exclude: []
		};

		var options = $.extend({}, defaults, {}, optionsParameter);
		
		return this.each(function() {
			//- Disable form elements
			$('input[type != "hidden"]', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0) {
					$(this).attr({disabled: false});
				}
			});

			$('textarea', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0) {
					$(this).attr({disabled: false});
				}
			});

			$('select', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0) {
					$(this).attr({disabled: false});
				}
			});

			$('button', $(this)).each(function() {
				if ($.inArray($(this).attr('id'), options.exclude) < 0) {
					$(this).attr({disabled: false});
				}
			});
		});

	};
	
})( jQuery );


$(document).ready(function () {
	/*
	$.getJSON("getdata", function(data) {
		$('form').loadJSON(data);
		if ( $("#disableFields").length > 0 && $("#disableFields").val().length > 0){
			$.each($("#disableFields").val().split(","), function(intIndex, objValue) {
	            $("#" + objValue).attr("disabled", true);
	        });
		}
	});			
	*/

	/*$('#myForm').ajaxForm({ 
        // dataType identifies the expected content type of the server response 
        dataType:  'json', 
        // success identifies the function to invoke when the server response 
        // has been received 
        success:   processJson 
    }); 

	function processJson(data) { 
	    // 'data' is the json object returned from the server 
		$('form').loadJSON(data);
		if ( $("#disableFields").length > 0 && $("#disableFields").val().length > 0){
			$.each($("#disableFields").val().split(","), function(intIndex, objValue) {
	            $("#" + objValue).attr("disabled", true);
	        });
		}
	}*/

});

var defaultJsonReader = {
        root: "rows",
        page: "page",
        total: "total",
        records: "records",
        repeatitems: false,
        cell: "cell",
        id: "id"
    };

// Added footer row to the end of the call, hope that works
function createGrid(gridId, pagerId, getUrl, addUrl, editUrl, deleteUrl,
		deleteSelectedUrl, colNames, colModel, caption, height, rowNum,
		rowList, multiselect, multidelete, loadOnce, readOnlyGrid, jsonReader,
		hideEdit, hideDelete, autowidth, rownumbers, hideCustomAddRow, hidePagerRow, 
		customEditMethod, customGridComplete, customLoadComplete,defaultHidden,
		rowColorBasedOnStatus,cellEdit, deleteAfterSubmit,isSearch,delExtraParam, footerrow) {
	
	var lazy = false;
	
	var gatesCheetah = window.gatesCheetah || {};
	
	// D028986: 	EDI booking - HAZ info did not pulling in when approving booking 
	// This is a work around, the loading/init of the grid should be restructured.
	if (gatesCheetah && gatesCheetah.lazyLoadGrid === true) {
		var arrayLength = gatesCheetah.lazyGrids.length;
		for (var i = 0; i < arrayLength; i++) {
		    if (gatesCheetah.lazyGrids[i] === gridId && 'hazGrid' != gridId) {
		    	lazy = true;
		    }
		}
	} 

	// addfooterrow
	if(!footerrow) footerrow = false;
	
	console.log('gridId:' + gridId + " lazyLoad:" + lazy+" footer="+footerrow);
	if(isSearch == undefined){
		isSearch = false;
	}
	if (!jsonReader){
		jsonReader = defaultJsonReader;
	}
	$("#"+gridId).jqGrid({
		lazy: lazy,
	   	url: getUrl,
	   	editurl: editUrl,
		datatype: 'json',
		mtype: 'GET',
	   	colNames: colNames,
	   	colModel: colModel,
	   	footerrow: footerrow,
	    userDataOnFooter: footerrow,
	   	postData: { 
		},
		rowNum:rowNum,
	   	rowList:rowList,
	   	height: height,
	   	cellEdit: cellEdit == undefined ? false : cellEdit,
	   	autowidth: autowidth == undefined ? true : autowidth,
		rownumbers: rownumbers == undefined ? true : rownumbers,
	   	pager: '#'+pagerId,
	    viewrecords: true,
	    caption: caption,
	    emptyrecords: "Empty records",
	    loadonce: loadOnce,
	    ignoreCase: true,
	    delOptions: {url: deleteUrl, caption: "Confirmation", msg: "Do you want to delete record(s)?",
	    	afterShowForm: function($form) {    
	 		   	var $dialog = $form.closest('div.ui-jqdialog'),
	 		    idOfDeletedRow = $("#DelData>td:first").text(),
	 		    selRowCoordinates = $('#'+idOfDeletedRow, $('#'+gridId)).offset();
	 		   	$dialog.offset(selRowCoordinates);
		    },
		    delData : delExtraParam == undefined ? {} : delExtraParam,
		    afterSubmit : function(response, postdata)
			{
		    	var result = eval('(' + response.responseText + ')');
				
				if($.isFunction(deleteAfterSubmit)) {
					deleteAfterSubmit(result);
				}
				
				if(!result.success)
				{
					if(result.messages!=null && result.messages.length!=0 && result.messages[0]!=null)
						return [false, result.messages[0]];
					else
						return [false, ""];
				}
				else
					return [true,""];
			}
	    },
	    editOptions: {url: editUrl},
        altRows:true,
        altclass:'uiAltRowClass',
	    loadComplete: function() {
	    	if(!readOnlyGrid){
		    	if($("#sData", "#gbox_" + gridId).length == 0){
		    		$("#"+gridId).jqGrid('editGridRowCustom','new', { url: addUrl });
			    }
	    	}
	    	/* D014209 when control is in grid enter key is attached to add button of the grid */
			$("#" + "gbox_" + gridId + "> div > div > div > table > thead > tr" + " :input").bind("keydown", function(e){
					var code = (e.keyCode ? e.keyCode : e.which); 
					if(code == 13) {
							$("#sData", "#" + "gbox_" + gridId).click();
							e.stopImmediatePropagation();
							return false;
					}
				}
			);
			if($.isFunction(customLoadComplete)) {
				customLoadComplete();
			}
	    },
	    jsonReader : jsonReader,
		gridComplete: function(){
			isAnyChangeInGrid();
	    	$("#"+"del_"+gridId, "#"+"gbox_"+gridId).hover(
	    			function() { jQuery("#" + gridId).jqGrid('setGridParam', {editurl: deleteSelectedUrl}); }
	    		);
	    	if (hideEdit){$("div.ui-pg-div.ui-inline-edit", "#"+"gbox_"+gridId).hide();}
	    	if (hideDelete){$("div.ui-pg-div.ui-inline-del", "#"+"gbox_"+gridId).hide();}
	    	if (hideCustomAddRow){$("#gview_"+gridId).find("#tr_id").hide();}
	    	if (hidePagerRow){$("#pg_"+pagerId).hide();}
	    	if ($.isFunction(customEditMethod)) {
				$("div.ui-pg-div.ui-inline-edit",
						"#" + "gbox_" + gridId).each(
						function() {
							$(this).attr(
									"onclick",
									$(this).attr("onclick").replace(
											"$.fn.fmatter.rowactions",
											"customEditMethod"));

						});
			}
			if($.isFunction(customGridComplete)) {
				customGridComplete();
			}
			
			//row coloring
			if(rowColorBasedOnStatus){
				
				 var rowIDs = jQuery("#"+gridId).getDataIDs(); 
					
			      for (var i=0;i<rowIDs.length;i=i+1){ 
			        rowData=jQuery("#"+gridId).getRowData(rowIDs[i]);
			        
			        var trElement = jQuery("#"+ rowIDs[i],jQuery('#'+gridId));
			        
			        //D025368
			        if(getUrl == "../spotpull/loadDispatchLocationGrid" && rowData.isLocationChng == "Y"){
			        	 trElement.addClass('rowred');
			        }else if (rowData.status=="E") {			        	
			           // trElement.removeClass('ui-widget-content');
			            trElement.addClass('rowred');
			        }else 
			        	if (rowData.status=="F")
			        		trElement.addClass('rowyellow');
			        	else if(rowData.isCheckVoid=="Voided")
			        		trElement.addClass('rowred');
			        }
			      }
			
			
			try{
			if(isNumeric(selectedId+'')){
			
				//jQuery("#accesrialChargeGrid tr#"+selectedId+"").addClass("ui-state-highlight selected-row ui-state-hover");
				
				
				jQuery("#accesrialChargeGrid tr#"+selectedId+" .cbox").click();
				jQuery("#accesrialChargeGrid tr#"+selectedId+" .cbox").attr("checked","checked");
				
				setTimeout(function(){
					if(jQuery("#info_dialog") != null)
						jQuery('#info_dialog').attr("style","display:none");
				}, 200);		
				
				
			}
			}catch(e){}
			
		}
		,
		multiselect:multiselect,
		hiddengrid: defaultHidden
	});
	$("#"+gridId).jqGrid('navGrid',"#"+pagerId,
			{edit:false,add:false,del:multidelete,search:isSearch,refresh:isSearch},
			{ },
	        { },
	        { 
	        	afterShowForm: function($form) {    
		 		   	var $dialog = $form.closest('div.ui-jqdialog'),
		 		    idOfDeletedRow = $("#DelData>td:first").text(),
		 		    selRowCoordinates = $('#'+idOfDeletedRow, $('#'+gridId)).offset();
		 		   	$dialog.offset(selRowCoordinates);
			    },
			    delData : delExtraParam == undefined ? {} : delExtraParam,
			    afterSubmit : function(response, postdata)
				{
			    	var result = eval('(' + response.responseText + ')');
					
					if($.isFunction(deleteAfterSubmit)) {
						deleteAfterSubmit(result);
					}
					
					if(!result.success)
					{
						if(result.messages!=null && result.messages.length!=0 && result.messages[0]!=null)
							return [false, result.messages[0]];
						else
							return [false, ""];
					}
					else
						return [true,""];
				}
	        }, 
			{ 
	        	afterShowSearch: function($form) {  
	        		
	        		var searchDialog = $("#searchmodfbox_"+gridId);
	        		position = $('#search_'+gridId).offset();
	        		position.top = position.top -130;
	        		searchDialog.offset(position);
			    },
		    	sopt:['cn',  'eq'/*,'bw', 'ew', 'lt', 'gt', 'ne'*/],
		        closeOnEscape: true, 
		        multipleSearch: false,
		        closeAfterSearch: true
		        //,overlay:false
		        
		        
		    }
	);
}


function enableGrid(gridId, pagerId){
	$("#gview_"+gridId).find("#tr_id").show();
	$("#pg_"+pagerId).show();
}

;var initialValues = new Array();
var changedArray = new Array();
var ignoreGrid=false;
function captureChanges(){
	ignoreGrid=true;
	initialValues = new Array();
	changedArray = new Array();
	$('#isAnyGridChanged').val("false");
	captureAllChanges(ignoreGrid);
}
function captureUIChangesWithGrid(){
	ignoreGrid=false;
	initialValues = new Array();
	changedArray = new Array();
	$('#isAnyGridChanged').val("false");
	captureAllChanges(ignoreGrid);
}
function captureOnlyGridActions() {
	initialValues = new Array();
	changedArray = new Array();
	$('#isAnyGridChanged').val("false");
	clearGridLists();
	 $(window).bind('beforeunload', function(event){
		 if(isAnyChangeOnPage()) {
			 event.stopImmediatePropagation();
			 return 'You have unsaved changes!';
		 }
	});
}
function resetFieldChanges(ids) {
	var idArray=ids.split(",");
	for(var index=0;index<idArray.length;index++) {
		var toRemove=changedArray.indexOf(idArray[index]);
		changedArray.splice(toRemove,1);
		initialValues[idArray[index]]=$('#'+idArray[index]).val();
	}
}
function captureAllChanges(ignore){
	ignoreGrid=ignore;
	initialValues = new Array();
	changedArray = new Array();
	clearGridLists();
	//D021215: 	search_field in header will not be considered as change
	var inputSelect='input:not(:disabled):not(:hidden):not(".ignoreInComparison"):not(".search_field"),select:not(:disabled):not(".ignoreInComparison"),textarea:not(:disabled):not(".ignoreInComparison")';
	$(inputSelect).live('focus',function() {
		if(ignoreGrid) {
			if(isInsideJQGrid($(this))) {
				return;
			}
		}
		if(initialValues[$(this).attr('id')]==undefined || initialValues[$(this).attr('id')]==null) {
			initialValues[$(this).attr('id')]=$(this).val();
			initialValues[initialValues.length]=$(this).attr('id');
		}
	});
	
	$('input[type=radio]').live('mouseover',function() {
		var name=$(this).attr('name');
		var checkedRadio=getSelectedRadio(name);
		if(initialValues[name]==undefined || initialValues[name]==null) {
			initialValues[name]=checkedRadio;
			initialValues[initialValues.length]=name;
		}
	});
	
	function getSelectedRadio(name) {
		var allRadios=$('input[name='+name+']');
		var checkedRadio='';
		for(var index=0;index<allRadios.length;index++) {
		   if($(allRadios[index]).is(':checked')) {
			   checkedRadio=$(allRadios[index]).attr('id');
			   break;
		   }
		}
		return checkedRadio;
	}
	
	$(inputSelect).live('input',function() {
		var element=$(this);
		changeEvent(element);
	});
	
	$(inputSelect).live('change',function() {
		var element=$(this);
		if(element.context.localName=="select") {
			changeEvent(element);
		}
	});
	
	 var origHook;

	    // There might already be valhooks for the "text" type
	 if ($.valHooks.text)
	        // Preserve the original valhook function
	        origHook = $.valHooks.text.set;
	 else
	        // Make room for a new valhook
	        $.valHooks.text = {};

	 $.valHooks.text.set = function (el) {
		 changesFromValueSetter(el);
	 };
	 
	    // There might already be valhooks for the "textarea" type
	 if ($.valHooks.textarea)
	        // Preserve the original valhook function
	        origHook = $.valHooks.text.set;
	 else
	        // Make room for a new valhook
	        $.valHooks.textarea = {};

	 $.valHooks.textarea.set = function (el) {
			 changesFromValueSetter(el);
	 };
	 
	// There might already be valhooks for the "textarea" type
	 if ($.valHooks.select)
	        // Preserve the original valhook function
	        origHook = $.valHooks.text.set;
	 else
	        // Make room for a new valhook
	        $.valHooks.select = {};

	 $.valHooks.select.set = function (el) {
			 changesFromValueSetter(el);
	 };
	 
	 
	 $(window).bind('beforeunload', function(event){
		 if(isAnyChangeOnPage()) {
			 event.stopImmediatePropagation();
			 return 'You have unsaved changes!';
		 }
		   
	});
}
function changesFromValueSetter(el) {
	var classes=$(el).attr('class');
	 if(classes!=undefined && classes!=null && classes.indexOf('captureValueSetter')>=0) {
	 if(ignoreGrid) {
			if(isInsideJQGrid($(el))) {
				return;
			}
		}
		if(initialValues[$(el).attr('id')]==undefined || initialValues[$(el).attr('id')]==null) {
			var elId=$(el).attr('id');
			if(elId==null) {
				$(el).addClass('ignoreInComparison');
			}
			else {
				initialValues[$(el).attr('id')]=$(el).val();
				initialValues[initialValues.length]=$(el).attr('id');
			}
		}
		 setTimeout(function() {
			 changeEvent(el);
		 },200);
	 }
}
function isInsideJQGrid(element) {
	var idElement=$(element).attr('id');
	
	if(idElement!=null && idElement!=undefined) {
		var position=idElement.search("jqg");
		
		if(position>=0) {
			return true;
		}
	}

	var closestDiv=$(element).closest('div');
	var classDiv=$(closestDiv).attr('class');
	
	if(classDiv!=null && classDiv!=undefined ) {
		if(classDiv.search("jqg")>=0) {
			return true;
		}
		closestDiv=$(element).closest(closestDiv);
		classDiv=$(closestDiv).attr('class');
		if(classDiv!=null && classDiv!=undefined && classDiv.search("jqg")>=0) {
			return true;
		}
		else {
			var parentDiv=$(closestDiv).parent();
			classDiv=$(parentDiv).attr('class');
			if(classDiv!=null && classDiv!=undefined) {
				if(classDiv.search("jqg")>=0){
					return true;
				}
			}
		}
		return false;
	}
	else {
		closestDiv=$(element).closest(closestDiv);
		classDiv=$(closestDiv).attr('class');
		if(classDiv!=null && classDiv!=undefined && classDiv.search("jqg")>=0) {
			return true;
		}
		else {
			var parentDiv=$(closestDiv).parent();
			classDiv=$(parentDiv).attr('class');
			if(classDiv!=null && classDiv!=undefined) {
				if(classDiv.search("jqg")>=0){
					return true;
				}
			}
		}
		return false;
	}
	return true;
}
function changeEvent(element) {
	//setTimeout(function() {
	if($(element).attr('type')=="radio") {
		var name=$(element).attr('name');
		var value=getSelectedRadio(name);
		var initialValue=initialValues[name];
		if(initialValue==value) {
			var index=changedArray.indexOf($(element).attr('id'));
			changedArray.splice(index,1);
		}
		else {
			if($(element).attr('id') == null || $(element).attr('id')==undefined) {
				$(element).addClass('ignoreInComparison');
			}
			else {
				changedArray[changedArray.length]=$(this).attr('id');
			}
		}
	}
	else if($(element).context.localName=="input" && $(element).attr('type')=="checkbox") {
		if(ignoreGrid) {
			if(isInsideJQGrid($(element))) {
				return;
			}
		}
		if($(element).attr('id') == null || $(element).attr('id')==undefined) {
			$(element).addClass('ignoreInComparison');
		
			if(initialValues[$(element).attr('id')]==undefined || initialValues[$(element).attr('id')]==null) {
				var isChecked=$(element).attr("checked");
				if(isChecked==element || isChecked=="true" || isChecked=="checked") {
					initialValues[$(element).attr('id')]="unchecked";
				}
				else {
					initialValues[$(element).attr('id')]="checked";
				}
				
				changedArray[changedArray.length]=$(element).attr('id');
			}
			else {
				var isChecked=$(element).attr('checked');
				if(initialValues[$(element).attr('id')]==undefined) {
					
				}
				if(isChecked=="true" || isChecked=="checked" || isChecked==true) {
					isChecked="checked";
				}
				else {
					isChecked="unchecked";
				}
				if(initialValues[$(element).attr('id')]==isChecked){
					var index=changedArray.indexOf($(element).attr('id'));
					changedArray.splice(index,1);
				}
				else {
					changedArray[changedArray.length]=$(element).attr('id');
				}
			}
		}
	}
	else if(initialValues[$(element).attr('id')]==$(element).val()) {
		if(ignoreGrid) {
			if(isInsideJQGrid($(element))) {
				return;
			}
		}
		var index=changedArray.indexOf($(element).attr('id'));
		changedArray.splice(index,1);
	}
	else {
		if(ignoreGrid) {
			if(isInsideJQGrid($(element))) {
				return;
			}
		}
		var index=changedArray.indexOf($(element).attr('id'));
		if(index<0) {
			if($(element).attr('id') == null || $(element).attr('id')==undefined) {
				$(element).addClass('ignoreInComparison');
			}
			else {
				changedArray[changedArray.length]=$(element).attr('id');
			}
		}
	}
	//},200);
}
function isAnyChangeInGrid() {
	//D034310 - This call is not required on load. Added check.
	if (document.readyState == "complete"){
		$.ajax({
			type : "GET",
			url : _context + "/gridChange/hasAnyGridChanged",
			success : function(responseText) {
				$('#isAnyGridChanged').val(responseText);
			}
		});
	}
}

function clearGridLists() {
	$.ajax({
		type : "GET",
		url : _context + "/gridChange/clearGridLists",
		success : function(responseText) {
		}
	});
}

function clearGrids(gridIds) {
	$.ajax({
		type : "GET",
		url : _context + "/gridChange/clearGrids",
		data: {
			grids:gridIds
		},
		success : function(responseText) {
		}
	});
}

function isAnyChangeOnPage() {
	if(changedArray.length>0 || $('#isAnyGridChanged').val()=="true") {
		return true;
	}
	return false;
};(function($) {
	$.fn.charLimit = function(options) {
		if(options === undefined || options.limit === undefined || typeof options.limit !== 'number') {
			$.error('Option limit must be defined and must be a number.');
		}

		return this.each(function() {
			var self = $(this);
			var charLimit = options.limit;

			function _truncate(ev) {
				var caretPos;
				if (ev.target.selectionStart !== undefined) {
					caretPos = ev.target.selectionEnd;
				} else if(document.selection) {
					ev.target.focus();
					var range = document.selection.createRange();
					range.moveStart('character', -ev.target.value.length);
					caretPos = range.text.length;
				}

				self.val(self.val().substring(0, charLimit));
				_setCaretPos(ev, caretPos);
			}

			function _setCaretPos(ev, pos) {
				if ($(ev.target).get(0).setSelectionRange) {
					$(ev.target).get(0).setSelectionRange(pos, pos);
				} else if ($(ev.target).get(0).createTextRange) {
					var range = $(ev.target).get(0).createTextRange();
					range.collapse(true);
					range.moveEnd('character', pos);
					range.moveStart('character', pos);
					range.select();
				}
			}

			self.keypress(function(ev) {
				var charCount = self.val().length;
				var selected;
				if (ev.target.selectionStart !== undefined) {
					selected = !(ev.target.selectionStart==ev.target.selectionEnd);
				} else if(document.selection) {
					ev.target.focus();
					var range = document.selection.createRange();
					selected = (range.text.length > 0);
				}

				if(charCount > charLimit-1 && !selected) {
					return false;
				}
				setTimeout(function() {
					_truncate(ev);
				}, 1);
			});

			self.bind('paste', function(ev) {
				setTimeout(function() {
					_truncate(ev);
				}, 1);
			});

		});
		
		
	};
	
})( jQuery );

function isNumeric(n) {
    var IsNumber = true;
    if(n.match(/[^\d]/)) {
    	IsNumber = false;
      }
    if(IsNumber && n.charAt(0) == 0)
    	IsNumber = false;

    return IsNumber;
};var tabbableForms = new Array();
var lastFocus=new Array();
var form='';
var tabs='';
var parentArray=new Array();
function tabSequence(tabSeqForm,onLastFocussedElement,noTabOnCASFields,skipFocusOpt) {
	// make focus optional
	var skipFocus = false;
	if(skipFocusOpt) skipFocus = true;
	
	var prevForm=form;
	if(tabSeqForm=='#' || tabSeqForm.trim()=='') {
		prevForm=parentArray[form];
		parentArray.splice(parentArray.indexOf(prevForm),1);
		tabSequence(prevForm,onLastFocussedElement,noTabOnCASFields);
		return;
	}
	setTimeout(function(){
	var tabbable = 'input[type="text"]:not(:disabled):not(:hidden):not(".noTab"),input[type="button"]:not(:disabled):not(".noTab"),input[type="checkbox"]:not(:disabled):not(".noTab"),input[type="password"]:not(:disabled),input[type="radio"]:not(:disabled):not(".noTab"),input[type="submit"]:not(:disabled),input[type="file"]:not(:disabled),input[type="reset"]:not(:disabled),input[type="image"]:not(:disabled),a:not(".comments"):not(".history"):not(".noTab"):not(".welcomemsg"):not(".prefrences"),button:not(:disabled):not(:hidden):not(".noTab"),select:not(:disabled):not(".noTab"),textarea:not(:disabled)';
	/*
	 * if user is opening any dialog
	 */
	isDialog=$(tabSeqForm).dialog( "isOpen" );
	if(isDialog=="true" || isDialog==true) {
		var splitted=tabSeqForm.split('#');
		var parentId=splitted[1]+'TabParent';
		$($(tabSeqForm).parent()).attr('id',parentId);
		$('.ui-dialog-titlebar-close').addClass('noTab');
		parentArray['#'+parentId]=prevForm;
		tabSequence('#'+parentId,false,false);
		return;
	}
	form=tabSeqForm;
	tabs=$(tabbable,form);
	if(tabs.length>0) {
		//Setting focus to first visible component on screen
		var next=0;
		var totalElements=tabs.length;
		var maxIndex=totalElements-1;
		while(tabs[next].offsetWidth==0) {
			if(next!=maxIndex) {
				next++;
			}
			else {
				break;
			}
		}
		var firstTabbable = tabs[next];
		/*
		 * If user wants to return to the point of tab where he/she have left from
		 * while opening any dialog 
		 */
		
		if(!skipFocus) {
			if(onLastFocussedElement!="true" && onLastFocussedElement!=true) {
				$(firstTabbable).trigger('focus');
				$(firstTabbable).select();
				//lastFocus[form]=$(firstTabbable);
			}
			else {
				if(lastFocus[form]!=null || lastFocus[form]!=undefined) {
					$(lastFocus[form]).trigger('focus');
					$(lastFocus[form]).select();
				}
				else {
					$(firstTabbable).trigger('focus');
					$(firstTabbable).select();
					//lastFocus[form]=$(firstTabbable);
				}
			}
		}
		/*
		 * if a cas screen is opened and we want to remove tabbing from cas screen fields
		 */
		if(isCAS=="true" || isCAS==true) {
			$('#displaybase a').addClass('noTab');
			$('#displaybase select').addClass('noTab');
			$('#displaybase input[type="checkbox"]').addClass('noTab');
		}
		if(noTabOnCASFields) {
			$('select[name="savedQuery"]').addClass('noTab');
			//$($('.quickSearchFldBgColor')[0]).addClass('noTab');
		}
	var index=tabbableForms.indexOf(form);
	
	if(index==-1) {
		tabbableForms[tabbableForms.length]=form;
		$(tabs).live('keydown', function(event) {
			if(isCAS!="true" && isCAS!=true && isDialog!=true) {
				var currentForm = $(this).parents('form:first');
				var currentFormId=$(currentForm).attr('id');
				if('#'+currentFormId!=form) {
					var formIndex=tabbableForms.indexOf('#'+currentFormId);
					if(formIndex!=-1) {
						tabSequence('#'+currentFormId, true,true,false);
						return;
					}
				}
			}
			if (event.keyCode == '16') {
				return;
			}
				
			
			if (event.keyCode == '9') {
				var tabs=$(tabbable,form);
				var totalElements=tabs.length;
				var maxIndex=totalElements-1;
				event.preventDefault();
				if (event.shiftKey) {
					
					var next=0;
					while(tabs[next].offsetWidth==0) {
						if(next!=maxIndex) {
							next++;
						}
						else {
							break;
						}
					}
					var firstTabbable = tabs[next];
					
					if (event.target == firstTabbable) {
						event.preventDefault();
						var length=tabs.length;
						var lastIndex=length-1;
						while(tabs[lastIndex].offsetWidth==0) {
							if(lastIndex!=0) {
								lastIndex--;
							}
							else {
								break;
							}
						}
						$(tabs[lastIndex]).trigger('focus');			
						$(tabs[lastIndex]).select();
						var lastTabbable = tabs[lastIndex];
						$(lastTabbable).trigger('focus');
						$(lastTabbable).select();
						//lastFocus[form]=$(lastTabbable);
					}
					else{
						var currentTabbable=tabs.index(this);
						var prev=(currentTabbable-1);
						while(tabs[prev].offsetWidth==0) {
							if(prev!=0){
								prev--;
							}
							else {
								break;
							}
						}
						$(tabs[prev]).trigger('focus');
						$(tabs[prev]).select();
					}
				} else  {
					var length=tabs.length;
					var lastIndex=length-1;
					while(tabs[lastIndex].offsetWidth==0) {
						if(lastIndex!=0) {
							lastIndex--;
						}
						else {
							break;
						}
					}
					var lastTabbable = tabs[lastIndex];
					if (event.target == lastTabbable) {
						event.preventDefault();
						var next=0;
						while(tabs[next].offsetWidth==0) {
							var totalElements=tabs.length;
							var maxIndex=totalElements-1;
							if(next!=maxIndex) {
								next++;
							}
							else {
								break;
							}
						}
						var firstTabbable = tabs[next];
						$(firstTabbable).trigger('focus');
						$(firstTabbable).select();
						//lastFocus[form]=$(firstTabbable);
					}
					else{
						var currentTabbable=tabs.index(this);
						var next=(currentTabbable+1);
						var totalElements=tabs.length;
						var maxIndex=totalElements-1;
						while(tabs[next].offsetWidth==0) {
							if(next!=maxIndex) {
								next++;
							}
							else {
								break;
							}
						}
						$(tabs[next]).trigger('focus');
						$(tabs[next]).select();
						//lastFocus[form]=$(tabs[next]);
					}
				}
			}

		});
		
		$(tabs).live('focus', function(event) {
			if(isDialog!="true" && isDialog!=true) {
				var currentForm = $(this).parents('form:first');
				var currentFormId=$(currentForm).attr('id');
				if('#'+currentFormId==form) {
					lastFocus[form]=$(this);
				}
			}
		});
		$(tabs).live('mousedown', function(event) {
			if(isDialog!="true" && isDialog!=true) {
				var currentForm = $(this).parents('form:first');
				var currentFormId=$(currentForm).attr('id');
				if('#'+currentFormId==form) {
					lastFocus[form]=$(this);
				}
			}
		});
	}
	/*
	 * only for close button in overlay
	 */
	$('.ui-dialog-titlebar-close').focus(function(event){
		event.preventDefault();
		next=0;
		maxIndex=tabs.length-1;
		while(tabs[next].offsetWidth==0) {
			if(next!=maxIndex) {
				next++;
			}
			else {
				break;
			}
		}
		var firstTabbable = tabs[next];
		 $(firstTabbable).trigger('focus');
		 $(firstTabbable).select();
		 $(this).removeClass('ui-state-focus');
		});
	
	}
	},100);
}

//This custom function, when called will order tabbing from top to bottom then left to right
function tabSequenceCustom(tabSeqForm,onLastFocussedElement,noTabOnCASFields) {
	var prevForm=form;
	if(tabSeqForm=='#' || tabSeqForm.trim()=='') {
		prevForm=parentArray[form];
		parentArray.splice(parentArray.indexOf(prevForm),1);
		tabSequenceCustom(prevForm,onLastFocussedElement,noTabOnCASFields);
		return;
	}
	setTimeout(function(){
	var tabbable = 'input[type="text"]:not(:disabled):not(:hidden):not(".noTab"),input[type="button"]:not(:disabled):not(".noTab"),input[type="checkbox"]:not(:disabled):not(".noTab"),input[type="password"]:not(:disabled),input[type="radio"]:not(:disabled):not(".noTab"),input[type="submit"]:not(:disabled),input[type="file"]:not(:disabled),input[type="reset"]:not(:disabled),input[type="image"]:not(:disabled),a:not(".comments"):not(".noTab"):not(".history"):not(".noTab"):not(".welcomemsg"):not(".prefrences"),button:not(:disabled):not(:hidden):not(".noTab"),select:not(:disabled):not(".noTab"),textarea:not(:disabled)';
	/*
	 * if user is opening any dialog
	 */
	isDialog=$(tabSeqForm).dialog( "isOpen" );
	if(isDialog=="true" || isDialog==true) {
		var splitted=tabSeqForm.split('#');
		var parentId=splitted[1]+'TabParent';
		$($(tabSeqForm).parent()).attr('id',parentId);
		$('.ui-dialog-titlebar-close').addClass('noTab');
		parentArray['#'+parentId]=prevForm;
		tabSequenceCustom('#'+parentId,false,false);
		return;
	}
	form=tabSeqForm;
	tabs=$(tabbable,form);

	if(tabs.length>0) {
		//Setting focus to first visible component on screen
		var next=0;
		var totalElements=tabs.length;
		var maxIndex=totalElements-1;
		while(tabs[next].offsetWidth==0) {
			if(next!=maxIndex) {
				next++;
			}
			else {
				break;
			}
		}
		var firstTabbable = tabs[next];
		/*
		 * If user wants to return to the point of tab where he/she have left from
		 * while opening any dialog 
		 */
		if(onLastFocussedElement!="true" && onLastFocussedElement!=true) {
			$(firstTabbable).trigger('focus');
			$(firstTabbable).select();
			//lastFocus[form]=$(firstTabbable);
		}
		else {
			if(lastFocus[form]!=null || lastFocus[form]!=undefined) {
				$(lastFocus[form]).trigger('focus');
				$(lastFocus[form]).select();
			}
			else {
				$(firstTabbable).trigger('focus');
				$(firstTabbable).select();
				//lastFocus[form]=$(firstTabbable);
			}
		}
		/*
		 * if a cas screen is opened and we want to remove tabbing from cas screen fields
		 */
		if(isCAS=="true" || isCAS==true) {
			$('#displaybase a').addClass('noTab');
			$('#displaybase select').addClass('noTab');
			$('#displaybase input[type="checkbox"]').addClass('noTab');
		}
		if(noTabOnCASFields) {
			$('select[name="savedQuery"]').addClass('noTab');
			//$($('.quickSearchFldBgColor')[0]).addClass('noTab');
		}
	var index=tabbableForms.indexOf(form);
	
	if(index==-1) {
		tabbableForms[tabbableForms.length]=form;
		$(tabs).live('keydown', function(event) {
			if(isCAS!="true" && isCAS!=true && isDialog!=true) {
				var currentForm = $(this).parents('form:first');
				var currentFormId=$(currentForm).attr('id');
				if('#'+currentFormId!=form) {
					var formIndex=tabbableForms.indexOf('#'+currentFormId);
					if(formIndex!=-1) {
						tabSequenceCustom('#'+currentFormId, true,true,false);
						return;
					}
				}
			}
			if (event.keyCode == '16') {
				return;
			}
				
			
			if (event.keyCode == '9') {
				var tabs=$(tabbable,form);
				tabs.sort(sortByTabIndex);
				var totalElements=tabs.length;
				var maxIndex=totalElements-1;
				event.preventDefault();
				if (event.shiftKey) {
					
					var next=0;
					while(tabs[next].offsetWidth==0) {
						if(next!=maxIndex) {
							next++;
						}
						else {
							break;
						}
					}
					var firstTabbable = tabs[next];
					
					if (event.target == firstTabbable) {
						event.preventDefault();
						var length=tabs.length;
						var lastIndex=length-1;
						while(tabs[lastIndex].offsetWidth==0) {
							if(lastIndex!=0) {
								lastIndex--;
							}
							else {
								break;
							}
						}
						$(tabs[lastIndex]).trigger('focus');			
						$(tabs[lastIndex]).select();
						var lastTabbable = tabs[lastIndex];
						$(lastTabbable).trigger('focus');
						$(lastTabbable).select();
						//lastFocus[form]=$(lastTabbable);
					}
					else{
						var currentTabbable=tabs.index(this);
						var prev=(currentTabbable-1);
						while(tabs[prev].offsetWidth==0) {
							if(prev!=0){
								prev--;
							}
							else {
								break;
							}
						}
						$(tabs[prev]).trigger('focus');
						$(tabs[prev]).select();
					}
				} else  {
					var length=tabs.length;
					var lastIndex=length-1;
					while(tabs[lastIndex].offsetWidth==0) {
						if(lastIndex!=0) {
							lastIndex--;
						}
						else {
							break;
						}
					}
					var lastTabbable = tabs[lastIndex];
					if (event.target == lastTabbable) {
						event.preventDefault();
						var next=0;
						while(tabs[next].offsetWidth==0) {
							var totalElements=tabs.length;
							var maxIndex=totalElements-1;
							if(next!=maxIndex) {
								next++;
							}
							else {
								break;
							}
						}
						var firstTabbable = tabs[next];
						$(firstTabbable).trigger('focus');
						$(firstTabbable).select();
						//lastFocus[form]=$(firstTabbable);
					}
					else{
						var currentTabbable=tabs.index(this);
						var next=(currentTabbable+1);
						var totalElements=tabs.length;
						var maxIndex=totalElements-1;
						while(tabs[next].offsetWidth==0) {
							if(next!=maxIndex) {
								next++;
							}
							else {
								break;
							}
						}
						$(tabs[next]).trigger('focus');
						$(tabs[next]).select();
						//lastFocus[form]=$(tabs[next]);
					}
				}
			}

		});
		
		$(tabs).live('focus', function(event) {
			if(isDialog!="true" && isDialog!=true) {
				var currentForm = $(this).parents('form:first');
				var currentFormId=$(currentForm).attr('id');
				if('#'+currentFormId==form) {
					lastFocus[form]=$(this);
				}
			}
		});
		$(tabs).live('mousedown', function(event) {
			if(isDialog!="true" && isDialog!=true) {
				var currentForm = $(this).parents('form:first');
				var currentFormId=$(currentForm).attr('id');
				if('#'+currentFormId==form) {
					lastFocus[form]=$(this);
				}
				else{
					var currentTabbable=tabs.index(this);
					var next=(currentTabbable+1);
					var totalElements=tabs.length;
					var maxIndex=totalElements-1;
					while(tabs[next].offsetWidth==0) {
						if(next!=maxIndex) {
							next++;
						}
						else {
							break;
						}
					}
					tabs[next].focus();
				}
			}
		});
	}
	/*
	 * only for close button in overlay
	 */
	$('.ui-dialog-titlebar-close').focus(function(event){
		event.preventDefault();
		next=0;
		maxIndex=tabs.length-1;
		while(tabs[next].offsetWidth==0) {
			if(next!=maxIndex) {
				next++;
			}
			else {
				break;
			}
		}
		var firstTabbable = tabs[next];
		 $(firstTabbable).trigger('focus');
		 $(firstTabbable).select();
		 $(this).removeClass('ui-state-focus');
		});
	
	}
	},100);
}

function sortByTabIndex(a, b){

	  var aIndex = a.tabindex;
	  var bIndex = b.tabindex; 
	  return ((aIndex < bName) ? -1 : ((aIndex > bIndex) ? 1 : 0));
};/*
 * Wrapper over jqGrid
 * - standard conventions
 * 
 */
(function ($) {
	/*
	 * caption, 
	 * height, width, 
	 * rowNum, // how many rows to show
	 * rowList, // [10,20,50,100] 
	 * gridId, // no longer need; $('#gridId').gatesGrid({}); 
	 * pagerId, // can be avoided by following some naming convention based on gridId
	 * colNames, colModel, // can limit to colModel by using its 'label' attribute for colNames
	 * getUrl, addUrl, editUrl, deleteUrl, deleteSelectedUrl, //+ 
	 * multiselect, 
	 * multidelete, //+ delete option in navigation/pager bar
	 * loadOnce, 
	 * readOnlyGrid, //+ used to decide if custom add row is to be displayed
	 * jsonReader,
	 * hideEdit, hideDelete, //+ hides corresponding inline action icons 
	 * autowidth, 
	 * rownumbers, 
	 * hideCustomAddRow, //+ intended to hide custom add row (does NOT work!) 
	 * hidePagerRow, //+ hide navigation/pager bar
	 * customEditMethod, //+ ???? 
	 * customGridComplete, customLoadComplete, //+ called inside gridComplete in the same order 
	 * 												(actually should be data-load followed by grid-complete)
	 * defaultHidden, //+ maps to 'hiddengrid' option
	 * rowColorBasedOnStatus //+ should be really a customGridComplete thing specific to a grid
	 * 
	 * //--------- additional ---------
	 * extraData (extraPostParams) 
	 *   //+ extra parameters to be posted on load, add/edit/delete; can be function or object
	 *   //  (postdata; editData)
	 */
	$.fn.gatesGrid = function(optionsParameter) {
		//- Support all jqGrid options, and an option called gatesOptions, which will override jqGrid options
		
		var gridId = $(this).attr('id');
		var gatesDefaults = {
			urls: {load: null, add: null, edit: null, del: null, delMultiple: null},
			extraData: {},
			//editData: {},
			//delData: {},
			//addData: {},
			readOnly: false,
			controls: {
				navBar: true,
				navBarAdd: true,
				navBarEdit: true,
				navBarDelete: true, //- multiDelete
				
				inlineAdd: true, //- hideCustomAddRow
				inlineEdit: true, //- hideEdit
				inlineDelete: true //- hideDelete
			},
			loadComplete: function() {},
			gridComplete: function() {},
			customEditMethod: function() {}
		};
		var gatesOptions = $.extend({}, gatesDefaults, {}, optionsParameter.gatesOptions);
		gatesOptions.controls = $.extend({}, gatesDefaults.controls, {}, optionsParameter.gatesOptions.controls);
	
		var serializeData = function(data, extraData) {
			return $.extend({}, data, {}, extraData);
		};
		
		var jqGridDefaults = {
			datatype: 'json',
			jsonReader: {
				root: "rows",
				page: "page",
				total: "total",
				records: "records",
				repeatitems: false,
				cell: "cell",
				id: "id"
			},
			url: gatesOptions.urls.load,
			editUrl: gatesOptions.urls.add,
			mtype: 'GET',
			autowidth: true,
			rownumbers: true,
			viewrecords: true,
			emptyrecords: "Empty records",
	        altRows:true,
	        altclass:'uiAltRowClass',
	        postData: gatesOptions.extraData, //- load
			serializeRowData: function(data) { //- inline edit
				return serializeData(data, gatesOptions.extraData);
			},
		    delOptions: { 
		    	url: gatesOptions.urls.del, caption: "Confirmation", msg: "Do you want to delete record(s)?",
				serializeDelData: function(data) { //- inline delete
					return serializeData(data, gatesOptions.extraData);
				},
				afterShowForm: function($form) {    
		 		   	var $dialog = $form.closest('div.ui-jqdialog'),
		 		    idOfDeletedRow = $("#DelData>td:first").text(),
		 		    selRowCoordinates = $('#'+idOfDeletedRow, $('#'+gridId)).offset();
		 		   	$dialog.offset(selRowCoordinates);
			    }				
		    },
		    editOptions: { 
		    	url: gatesOptions.urls.edit,
		    	editData: gatesOptions.extraData, // add/edit item through overlay
		    	delData: gatesOptions.extraData,
		    	serializeDelData: function(data) { //- delete
					return serializeData(data, gatesOptions.extraData);
				}
	    	},
	    	serializeDelData: function(data) { //- delete
				return serializeData(data, gatesOptions.extraData);
			}
		};

		var jqGridOptions = $.extend({}, jqGridDefaults, {}, optionsParameter);
		var pagerId = $(jqGridOptions.pager).attr('id');
		
		// modify jqGridOptions based on gatesOptions
		jqGridOptions.url = gatesOptions.urls.load;
		jqGridOptions.editUrl = gatesOptions.urls.add;
		
		var controls = gatesOptions.controls;
		
	    jqGridOptions.loadComplete = function() {
	    	if(!gatesOptions.readOnly && controls.inlineAdd) {
		    	if($("#sData", "#gbox_" + gridId).length == 0){
		    		$("#"+gridId).jqGrid('editGridRowCustom','new', { 
		    			url: gatesOptions.urls.add, 
		    			editData: gatesOptions.extraData // needs to fix "postdata = $.extend(postdata,rp_ge.editData,onCS);"
		    			// serializeEditData
	    			});
			    }
	    	}
	    	/* D014209 when control is in grid enter key is attached to add button of the grid */
			$("#" + "gbox_" + gridId + "> div > div > div > table > thead > tr" + " :input").bind("keydown", function(e){
					var code = (e.keyCode ? e.keyCode : e.which); 
					if(code == 13) {
							$("#sData", "#" + "gbox_" + gridId).click();
							e.stopImmediatePropagation();
							return false;
					}
				}
			);
			
			if ($.isFunction(gatesOptions.loadComplete)) {
				gatesOptions.loadComplete();
			}
	    },

		jqGridOptions.gridComplete = function(){
	    	$("#"+"del_"+gridId, "#"+"gbox_"+gridId).hover(
	    			function() { jQuery("#" + gridId).jqGrid('setGridParam', {editurl: gatesOptions.urls.delMultiple}); }
	    		);
	    	if (gatesOptions.readOnly || !controls.inlineEdit){
	    		$("div.ui-pg-div.ui-inline-edit", "#"+"gbox_"+gridId).hide();
    		}
	    	if (gatesOptions.readOnly || !controls.inlineDelete){
	    		$("div.ui-pg-div.ui-inline-del", "#"+"gbox_"+gridId).hide();
    		}
	    	/* -- redundant, as already done in loadComplete; moreover, the code is not correct
	    	if (gatesOptions.hideCustomAddRow){
	    		$("#gview_"+gridId).find("#tr_id").hide();
    		}
    		*/
	    	if (!controls.navBar){
	    		$("#pg_"+pagerId).hide();
    		}
			/*if ($.isFunction(gatesOptions.customEditMethod)) {
				$("div.ui-pg-div.ui-inline-edit",
						"#" + "gbox_" + gridId).each(
						function() {
							$(this).attr(
									"onclick",
									$(this).attr("onclick").replace(
											"$.fn.fmatter.rowactions",
											gatesOptions.customEditMethod));

						});
			}*/
			if($.isFunction(gatesOptions.gridComplete)) {
				gatesOptions.gridComplete();
			}
			
			//row coloring
			if(gatesOptions.rowColorBasedOnStatus){
				
				 var rowIDs = jQuery("#"+gridId).getDataIDs(); 
				
			      for (var i=0;i<rowIDs.length;i=i+1){ 
			        rowData=jQuery("#"+gridId).getRowData(rowIDs[i]);
			        var trElement = jQuery("#"+ rowIDs[i],jQuery('#'+gridId));
			        if (rowData.status=="E") {			        	
			           // trElement.removeClass('ui-widget-content');
			            trElement.addClass('rowred');
			        }else{ 
			          if (rowData.status=="F"){
			          // trElement.removeClass('ui-widget-content');
			            trElement.addClass('rowyellow');
			          }
			        }
			      }
			}
		      
		};
		
		/*
		 * Iterate jqGridOptions.colModel
		 * 	- if formatter = "actions"
		 *	- update formatoptions {
		 *		//- also consider readOnly flag ...
		 *		editbutton: gatesOptions.controls.inlineEdit
		 *		addbutton: gatesOptions.controls.inlineAdd
		 *	}
		 *
		 *	// remove "hide" logic on loadComplete()
		 */
		 for (var i=0;i<jqGridOptions.colModel.length;i=i+1){
			 if(jqGridOptions.colModel[i].formatter=="actions")
				 {
				 
				 }
		 }
		
	    
		// jqGridOptions.url = gatesOptions.urls.load;
		 
		return this.each(function() {
			$(this).jqGrid(jqGridOptions);
			
			if (jqGridOptions.pager) {
				$(this).jqGrid('navGrid', jqGridOptions.pager,
						{edit:controls.navBarEdit,add:controls.navBarAdd,del:controls.navBarDelete,search:false,refresh:false},
						{ }, //- prmEdit
				        { }, //- prmAdd
				        {   
				        	onclickSubmit:function(response, postdata, formid) {
				        		    // D024154, update grid before delete
						        	if(gatesOptions.delFunction) {
						        		gatesOptions.delFunction();
						        	}
						    },
				        	afterShowForm: function($form) {  
				        		
				        		
					 		   	var $dialog = $form.closest('div.ui-jqdialog'),
					            idOfDeletedRow = $("#DelData>td:first").text(),
					            selRowCoordinates = $('#'+idOfDeletedRow, $('#'+gridId)).offset();
					 		   	$dialog.offset(selRowCoordinates);
					 		   if(somethingChanged == true || somethingChanged == 'true')
								{
									somethingChanged=true;
								}
				        		else if (somethingChanged == false || somethingChanged == 'false') 
								{
									somethingChanged=false;
								}
						    }
				        }, //- prmDel
						{ //- prmSearch 
					    	sopt:['eq', 'ne', 'lt', 'gt', 'cn', 'bw', 'ew'],
					        closeOnEscape: true, 
					        multipleSearch: true, 
					        closeAfterSearch: true 
				        }
				);
			}

		});
	};
	
})(jQuery);
function blockUI(opts){	
	var myOpts = { 
		message: $('<div class="span-1"><img src="/gates/resources/images/loading.gif"></div>'+
				'<div class="span-4"><strong>Please wait.<br>Processing ...</strong></div>'), 
		css: {width:'22%',border:'3px solid #6E89DD',backgroundColor:'#EEF0FC',padding:'3px',textAlign:	'left'},
		overlayCSS:  {
			backgroundColor: '#FFFFFF',
			opacity: 0.2,
			cursor: 'wait' }
		};
	
	var fullOpts = $.extend({}, myOpts, opts || {});	
	$.blockUI(fullOpts);
}

function blockUISetup() {
	$(document).ready(function() {
		var $message = $('#blockUIDIV'); //located in templates
		$(window).bind('beforeunload', function(event) {
			//console.log('window.beforeunload called()');
			blockUI({message:$message,fadeIn:0,fadeOut:0});
			//console.log('after window.beforeunload call');
			return null;			
		});
		//console.log('blockUISetup() window.onbeforeunload set');
	});	
}

$(document).ready(function(){
$(window).bind('resize', function () { 

	 var  overlayDivs = $('.ui-dialog div:visible');
	 for(var i=0;i< overlayDivs.length;i++){
	if($($($('.ui-dialog div:visible')[i])).hasClass('ui-dialog-content') && $($($('.ui-dialog div:visible')[i]).parent()).hasClass('ui-dialog')){
		if($(window).width()<950){
		if(($($($('.ui-dialog div:visible')[i]).parent()).outerWidth()+$($($('.ui-dialog div:visible')[i]).parent()).position().left)>$(window).width()){
			var x = $(window).width()-$($($('.ui-dialog div:visible')[i]).parent()).outerWidth();
			var y = $($($('.ui-dialog div:visible')[i]).parent()).position().top - jQuery(document).scrollTop();
			if(x<0){
				$('#'+$($($('.ui-dialog div:visible')[i])).attr('id')).dialog({
			        position: {
						at: 'left'
					}
					
				});
			}else
			$('#'+$($($('.ui-dialog div:visible')[i])).attr('id')).dialog('option', 'position', [x/2,y]);
		}
	}else{
		var x=($(window).width()-$($($('.ui-dialog div:visible')[i]).parent()).outerWidth())/2;
		var y = $($($('.ui-dialog div:visible')[i]).parent()).position().top - jQuery(document).scrollTop();
		$('#'+$($($('.ui-dialog div:visible')[i])).attr('id')).dialog('option', 'position', [x,y]);
		
		}
	}
	}
	});
	
	
	});
	
/*
 * Close GATES window if sessionId does not match JSESSIONID cookie;
 * this happens when,
 * 1. there is an existing GATES window
 * 2. session times out
 * 3. user launches another GATES window (which will be in a new session)
 * 4. user starts working on the old GATES window
 */
/*
window.onload=function() {
	// if ($('#_session_id').html() != $.cookie("JSESSIONID")) {
	var newWindowPrefix = 'gates_';
	var currWindowName = window.name? window.name: '';
	
	var sessionIdFromCookie = $.cookie("JSESSIONID");
	var sessionIdFromPage = $('#_session_id').html();
	var sessionIdFromWindowName = currWindowName.substr(newWindowPrefix.length);
	
	// if currWindowName does not start with newWindowPrefix
	if (currWindowName.substr(0, newWindowPrefix.length) == newWindowPrefix) {
		if (sessionIdFromPage != sessionIdFromWindowName) {
			window.name = newWindowPrefix + sessionIdFromPage;
			
			// console.log("Closing Window: [" +	$('#_session_id').html() + "] != [" + $.cookie("JSESSIONID") + "] - "+window.name);
			
			alert('You cannot open multiple browser windows/tabs within the same HTTP session');
			window.close();
		}
	}
};
*/
var searchBound = false;
$(document).ready(function(){
	
	/*
	 * prevent controls to open new browser tab/window; 
	 * don't allow these on hyperlinks:
	 *   - Ctrl-Click
	 *   - Shift-Click
	 *   - Context menu (right-click)
	 */
	$('a[href]').click(function(event) {
		if(event.ctrlKey  == true || event.shiftKey==true) {
			event.preventDefault();
		}
	}).bind("contextmenu", function(e) {
		e.preventDefault();
	});
	
	//D021215: 	Session Variable clear/change shortcut
	if(!searchBound){
		searchBound = true;
		//D029442: 
		if($("#textfield5").val()!= null  && $("#textfield5").val() != undefined  && $("#textfield5").val() != 'undefined' && $("#textfield5").val()[0]=="T"){
			$("#textfield5").val("");
			$.ajax({
					url: "/gates/workingContext/setContext",
					type: "POST",
					data: {key:"BK_BOOKING",value:""},
					success: function(responseText){
						$("#textfield5").removeAttr('style');
					}
				});
		}
		$("#textfield5").keydown(function (e) {
	        // Allow: backspace, delete, tab, escape, enter and .
	        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
	             // Allow: Ctrl+A
	            (e.keyCode == 65 && e.ctrlKey === true) || 
	            // Allow: Ctrl+V
	            (e.keyCode == 86 && e.ctrlKey === true) || 
	             // Allow: home, end, left, right
	            (e.keyCode >= 35 && e.keyCode <= 39)) {
	                 // let it happen, don't do anything
	                 return;
	        }
	        // Ensure that it is a number and stop the keypress
	        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
	            e.preventDefault();
	        }
	    });
		
		$('#textfield5').change(function(){
			var searchText = $("#textfield5").val();
			if(searchText != '' && searchText.length == 7 && isNumeric(searchText)){
				$.ajax({
					url: "/gates/workingContext/setContext",
					type: "POST",
					data: {key:"BK_BOOKING",value:searchText},
					success: function(responseText){
						$("#textfield5").removeAttr('style');
					}
				});
			} else {
				$("#textfield5").attr('style', 'background-color:#F69999');
			}
		});
	}

	//openGatesWindow();
});
    
//	D021215: 	Session Variable clear/change shortcut
function getSearchFieldValue(delay){
	setTimeout(
			function() {  
				$.ajax({
					url: "/gates/workingContext/getContext",
					type: "GET",
					data: {key:"BK_BOOKING"},
					success: function(responseText){
						$("#textfield5").val(responseText.data);
					}
				});
			}
		,delay);
}

function openGatesWindow() {
	var newWindowPrefix = 'gates_';
	var newWindowName =  newWindowPrefix + $.cookie('JSESSIONID');
    
	var currWindowName = window.name? window.name: '';

	// if currWindowName does not start with newWindowPrefix
	if (currWindowName.substr(0, newWindowPrefix.length) != newWindowPrefix) {
		var height = window.screen.availHeight-28-20;
		var width = window.screen.availWidth-10;
		
		var url=window.location.href;   
		
		newWindows = window.open(url, newWindowName,
				'height=' + height + ',width=' + width + 'menubar=no,left=0,top=0,scrollbars=yes,resizable=yes,status=yes');

		//!- ChromeFrame crashes with a small timeout value (e.g. in milli-seconds)
		setTimeout(function() {
		    window.close();
		}, 3000);
	
		if (newWindows || newWindows != null) {
			hideGatesUI();
			$('body').append('<div>You can safely close this window</div>');
			
		} else {
			hideGatesUI();
			$('body').append('<div>Pop-up blocker is detected. Please click <a onclick="openGatesWindow()">here</a> to start application.</div>');
		}
	}
}

function hideGatesUI() {
	$('div').hide();
}
;$(document).ready(function() {
	$('input:text').live('paste', function() {

		var el = $(this);
		setTimeout(function() {
			var text = $(el).val();
			if (!containsAllAscii(text)) {

				$(el).val(replaceNonASCIIChars(text));

			}
			// var text = $(el).val();
		}, 100);
	});
	$("textarea").live('paste', function() {

		var el = $(this);
		setTimeout(function() {
			var text = $(el).val();
			if (!containsAllAscii(text)) {

				$(el).val(replaceNonASCIIChars(text));

			}
			// var text = $(el).val();
		}, 100);
	});
});

function containsAllAscii(str) {
	return /^[\000-\177]*$/.test(str);
}
function replaceNonASCIIChars(text) {
	var data = "";
	var length = text.length;

	var i = 0;
	for (i = 0; i < length; i++) {

		var characterCode = text.charCodeAt(i);
		if (characterCode > 126) {
			if (characterCode == 8216 || characterCode == 8217) {
				data = data + "'";
			} else if (characterCode == 8220 || characterCode == 8221) {
				data = data + '"';
				// Removed alert Vivek Satyarthi
			} 
			else if(characterCode==8356) {
				//to add Pound Symbol when user copy paste Lira Symbol ASCII code Lira = 8356 and Pound = 163
				data = data + String.fromCharCode(163);
			}
			else {
				//alert(characterCode);
				data = data + text.charAt(i);


			}

		} else {
			data = data + text.charAt(i);
		}
	}
	return data;
};	
	window.alert = function(message){
		window.scroll(0,0);
	    $(document.createElement('div'))
	        .attr({title: 'Alert', 'class': 'alert'})
	        .html(message)
	        .dialog({
	            buttons: {OK: function(){$(this).dialog('close');}},
	            close: function(){$(this).remove();},
	            draggable: true,
	            modal: true,
	            resizable: false,
	            width: 'auto',
	            position:[500,300],
	            scrollable:false
	        });
	};
	
	
	window.otherAlert = function(title,message){
		window.scroll(0,0);
	    $(document.createElement('div'))
	        .attr({title: title, 'class': 'alert'})
	        .html(message)
	        .dialog({
	            buttons: {OK: function(){$(this).dialog('close');}},
	            close: function(){$(this).remove();},
	            draggable: true,
	            modal: true,
	            resizable: false,
	            width: 'auto',
	            position:[500,300],
	            scrollable:false
	        });
	};

